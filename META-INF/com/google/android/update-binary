#!/sbin/sh
# Shell Script EDIFY Replacement: Recovery Flashable Zip
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=$(dirname "$ZIPFILE");

# ui_print "<message>" ["<message 2>" ...]
ui_print() {
    echo -ne "ui_print $1\n" > $OUTFD;
    echo -ne "ui_print\n" > $OUTFD;
}

# show_progress <amount> <time>
show_progress() { echo "progress $1 $2" >> $OUTFD; }

# set_progress <amount>
set_progress() { echo "set_progress $1" >> $OUTFD; }

# sleep <seconds> exists in shell

# is_substring <substring> <string>
is_substring() { case "$2" in *$1*) echo 1;; *) echo 0;; esac; }
# less_than_int <x> <y>
less_than_int() { if [ $1 -lt $2 ]; then echo 1; else echo 0; fi; }
# greater_than_int <x> <y>
greater_than_int() { if [ $1 -gt $2 ]; then echo 1; else echo 0; fi; }

# format(fs_type, partition_type, device, fs_size, mountpoint) {} is unneeded since specific format/wipe commands may be run directly
# mount <partition> exists in shell
# unmount <partition>
unmount() { umount "$1"; }
# is_mounted <partition>
is_mounted() { if [ "$(mount | grep " $1 ")" ]; then echo 1; else echo 0; fi; }
# tune2fs(device[, arg, â€¦]) {} should be done directly with the tune2fs command

# write_raw_image <file> <block>
write_raw_image() { dd if="$1" of="$2"; }
# write_firmware_image() {} is a manufacturer command to apply further OEM update zips with hboot/uboot functions, so can't be duplicated
# wipe_block_device(block_dev, len) {} should be done directly with dd or flash_erase
# wipe_cache() {} should be done directly with format or rm -rf

# package_extract_file <file> <destination_file>
package_extract_file() { mkdir -p "$(dirname "$2")"; unzip -o "$ZIPFILE" "$1" -p > "$2"; }

# package_extract_dir <dir> <destination_dir>
package_extract_dir() {
  local entry outfile;
  for entry in $(unzip -l "$ZIPFILE" 2>/dev/null | tail -n+4 | grep -v '/$' | grep -o " $1.*$" | cut -c2-); do
    outfile="$(echo "$entry" | sed "s|${1}|${2}|")";
    mkdir -p "$(dirname "$outfile")";
    unzip -o "$ZIPFILE" "$entry" -p > "$outfile";
  done;
}

# symlink <file/dir> <link> [<link2> ...]
symlink() {
  local file="$1";
  while [ "$2" ]; do
    ln -sf "$file" "$2";
    shift;
  done;
}

# read_file(filename) {} is unneeded since file contents can be read directly with the cat command
# concat(expr[, expr, ...]) {} is unneeded since string operations can be done directly
# stdout(expr[, expr, ...]) {} is unneeded since all output goes to stdout by default

# apply_patch <src_file> <tgt_file> <tgt_sha1> <tgt_size> [<src_sha1_1>:<patch1> [<src_sha1_2>:<patch2> ...]]
apply_patch() { LD_LIBRARY_PATH=/system/lib applypatch "$@"; }
# apply_patch_check <file> [<sha1_hex> [<sha1_hex2> ...]]
apply_patch_check() { LD_LIBRARY_PATH=/system/lib applypatch -c "$@"; }
# apply_patch_space <bytes>
apply_patch_space() { LD_LIBRARY_PATH=/system/lib applypatch -s $1; }

# abort [<message>]
abort() { ui_print "$*"; exit 1; }

# assert "<command>" ["<command2>"]
assert() {
  while [ "$1" ]; do
    $1;
    test $? != 0 && abort 'assert failed('"$1"')';
    shift;
  done;
}

set_progress 0.10 
show_progress 0.10 10
sleep 1 

#Set the position of the progress bar
set progress 0.25
sleep 1 
 
package_extract_dir "dualnine" "/tmp/dualnine"
chmod 0755 /tmp/dualnine/bootctl

ui_print " "
ui_print "================================="
ui_print "=     Dualnine for rosemary     ="
ui_print "=   Dual Booting made possible  ="
ui_print "=       Release: Timeless       ="
ui_print "================================="
ui_print " "
ui_print "Installing, please be patient... "
ui_print " "

set_progress 0.45
sleep 1

ui_print "Setting up..."
ui_print " "
ui_print "This should take about 1 minutes (max=5 min)" 
ui_print "If it takes longer than that,there might be a problem."

set_progress 0.65
show_progress 0.65 30
sleep 1  

#instead of doing this i am think about sourcing the file
#this will be added in future updates
#. /tmp/dualnine/dualnine.sh
#so i can just called the functions here
sh="/sbin/sh"
"$sh" /tmp/dualnine/dualnine.sh
if [ $? -eq 0 ]; then
	ui_print " "
	ui_print "Installation successful"
	ui_print " "
else  
    ui_print " "
    ui_print "Installation unsuccessful."
    ui_print "please send recovery.log from /tmp to developer"	
	abort "error while processing script"
fi

# 100%
set_progress 1.0 
show_progress 1.0 1


